[{"D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\index.js":"1","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\App.js":"2","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\routes\\Routes.jsx":"3","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\header\\Header.jsx":"4","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\hooks\\useUser.js":"5","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\homepage\\Homepage.jsx":"6","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\customer\\Customer.jsx":"7","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\order\\Order.jsx":"8","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\dashboard\\Dashboard.jsx":"9","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\inventory\\Inventory.jsx":"10","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\loginpage\\Loginpage.jsx":"11","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\registerpage\\Registerpage.jsx":"12","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\user\\user.jsx":"13","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\hooks\\useFetchInventory.js":"14","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\hooks\\useOrder.js":"15","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\dashboard\\barchart.jsx":"16"},{"size":268,"mtime":1653320227234,"results":"17","hashOfConfig":"18"},{"size":335,"mtime":1653320227214,"results":"19","hashOfConfig":"18"},{"size":2179,"mtime":1653320227235,"results":"20","hashOfConfig":"18"},{"size":2766,"mtime":1654197933169,"results":"21","hashOfConfig":"18"},{"size":1342,"mtime":1654197758280,"results":"22","hashOfConfig":"18"},{"size":1338,"mtime":1654198219102,"results":"23","hashOfConfig":"18"},{"size":3610,"mtime":1654197973164,"results":"24","hashOfConfig":"18"},{"size":8102,"mtime":1654198633482,"results":"25","hashOfConfig":"18"},{"size":3328,"mtime":1653320227218,"results":"26","hashOfConfig":"18"},{"size":5802,"mtime":1654198087505,"results":"27","hashOfConfig":"18"},{"size":2080,"mtime":1654198203585,"results":"28","hashOfConfig":"18"},{"size":2719,"mtime":1654198914799,"results":"29","hashOfConfig":"18"},{"size":5074,"mtime":1653741358458,"results":"30","hashOfConfig":"18"},{"size":2621,"mtime":1654197842629,"results":"31","hashOfConfig":"18"},{"size":1669,"mtime":1654198394493,"results":"32","hashOfConfig":"18"},{"size":2347,"mtime":1653320227218,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"r9s4z8",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"36"},"D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\index.js",[],["71","72"],"D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\App.js",[],"D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\routes\\Routes.jsx",[],"D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\header\\Header.jsx",[],"D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\hooks\\useUser.js",[],"D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\homepage\\Homepage.jsx",[],"D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\customer\\Customer.jsx",[],"D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\order\\Order.jsx",["73","74","75"],"D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\dashboard\\Dashboard.jsx",[],"D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\inventory\\Inventory.jsx",["76"],"import { Button, Grid, TextField, Typography } from '@mui/material';\r\nimport { styled } from '@mui/material/styles';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport { useState } from 'react';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport useFetchInventory from '../../../hooks/useFetchInventory';\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n  },\r\n}));\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n  '&:nth-of-type(odd)': {\r\n    backgroundColor: theme.palette.action.hover,\r\n  },\r\n  // hide last border\r\n  '&:last-child td, &:last-child th': {\r\n    border: 0,\r\n  },\r\n}));\r\n\r\nconst Inventory = () => {\r\n  const [product, setProduct] = useState({\r\n    productname: '',\r\n    quantity: '',\r\n    price: '',\r\n  });\r\n\r\n  const { loading, data, error, addProduct, deleteProduct } =\r\n    useFetchInventory();\r\n\r\n  const productHandler = (e) => {\r\n    const { name, value } = e.target;\r\n    setProduct({\r\n      ...product,\r\n      [name]: value,\r\n    });\r\n  };\r\n  console.log(data, 'ðŸ’•ðŸ’•ðŸ’•');\r\n  //adding the stockHandler\r\n  const addProductHandler = (e) => {\r\n    console.log(product);\r\n    e.preventDefault();\r\n    addProduct(product);\r\n    setProduct({\r\n      productname: '',\r\n      quantity: '',\r\n      price: '',\r\n    });\r\n  };\r\n\r\n  const deleteProductHandler = (index) => {\r\n    deleteProduct(index);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Typography>Add Product</Typography>\r\n\r\n      <form onSubmit={addProductHandler}>\r\n        <Grid container spacing={1}>\r\n          <Grid xs={12} sm={6} item>\r\n            <TextField\r\n              placeholder=\"Enter Product name\"\r\n              label=\"Product Name\"\r\n              name=\"productname\"\r\n              value={product.productname}\r\n              variant=\"outlined\"\r\n              onChange={productHandler}\r\n              fullWidth\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid xs={12} sm={6} item>\r\n            <TextField\r\n              type=\"number\"\r\n              placeholder=\"Enter Quantity of product\"\r\n              name=\"quantity\"\r\n              value={product.quantity}\r\n              label=\"Quantity\"\r\n              variant=\"outlined\"\r\n              onChange={productHandler}\r\n              fullWidth\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid xs={12} sm={6} item>\r\n            <TextField\r\n              type=\"number\"\r\n              name=\"price\"\r\n              value={product.price}\r\n              placeholder=\"Enter Price of product\"\r\n              label=\"Price\"\r\n              variant=\"outlined\"\r\n              onChange={productHandler}\r\n              fullWidth\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\r\n              Add Product\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n      <Typography>Inventory Stock</Typography>\r\n      <TableContainer component={Paper}>\r\n        <Table aria-label=\"customized table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell align=\"left\">Sr.No</StyledTableCell>\r\n              <StyledTableCell align=\"left\">Product Id</StyledTableCell>\r\n              <StyledTableCell align=\"left\">Product Name</StyledTableCell>\r\n              <StyledTableCell align=\"left\">Product Price</StyledTableCell>\r\n              <StyledTableCell align=\"left\"> Qty</StyledTableCell>\r\n              <StyledTableCell align=\"left\">Total Price</StyledTableCell>\r\n              <StyledTableCell align=\"left\">Delete</StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          {false ? (\r\n            <p>Loading...</p>\r\n          ) : error ? (\r\n            <p>{error}</p>\r\n          ) : (\r\n            <TableBody>\r\n              {data.map((stock, index) => (\r\n                <StyledTableRow key={index}>\r\n                  <StyledTableCell component=\"th\" scope=\"row\">\r\n                    {index + 1}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"left\">\r\n                    SKU000{index + 1}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"left\">\r\n                    {stock.productname}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"left\">{stock.price}</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"left\">\r\n                    {stock.totalQuantity}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"left\">\r\n                    {stock.totalprice}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"left\">\r\n                    <Tooltip title=\"Delete\">\r\n                      <IconButton>\r\n                        <DeleteIcon\r\n                          onClick={() => deleteProductHandler(index)}\r\n                        />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </StyledTableCell>\r\n                </StyledTableRow>\r\n              ))}\r\n            </TableBody>\r\n          )}\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Inventory;\r\n","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\loginpage\\Loginpage.jsx",["77"],"D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\registerpage\\Registerpage.jsx",[],"D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\user\\user.jsx",["78"],"import { TextField, Typography, Button } from '@mui/material';\r\nimport { useState } from 'react';\r\nimport styles from './user.module.css';\r\n\r\nconst User = () => {\r\n  const [user, setUser] = useState({\r\n    fullname: '',\r\n    email: '',\r\n    address: '',\r\n    mobileNo: '',\r\n    phoneNo: '',\r\n    //uploadedfile:null\r\n  });\r\n\r\n  const onchangeHandler = (e) => {\r\n    const { name, value } = e.target;\r\n    setUser({\r\n      ...user,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={styles.form}>\r\n      <form className={styles.bodyform}>\r\n        <Typography variant=\"h3\">My Profile</Typography>\r\n\r\n        <div className={styles.img}>\r\n          <img src=\"\"></img>\r\n        </div>\r\n        <label>Full Name</label>\r\n        <TextField\r\n          id=\"outlined-fullname\"\r\n          label=\"Full Name\"\r\n          name=\"fullname\"\r\n          // value={user.fullname}\r\n          type=\"text\"\r\n          color=\"secondary\"\r\n          onChange={onchangeHandler}\r\n          required\r\n          sx={{ marginBottom: '10px' }}\r\n          fullWidth\r\n          variant=\"outlined\"\r\n        />\r\n        <label> PhoneNumber</label>\r\n        <TextField\r\n          id=\"outlined-fullname\"\r\n          label=\"PhoneNumber\"\r\n          name=\"phoneNo\"\r\n          // value={user.phoneNo}\r\n          type=\"text\"\r\n          onChange={onchangeHandler}\r\n          color=\"secondary\"\r\n          required\r\n          sx={{ marginBottom: '10px' }}\r\n          fullWidth\r\n          variant=\"outlined\"\r\n        />\r\n        <label>MobileNo</label>\r\n        <TextField\r\n          id=\"outlined-fullname\"\r\n          label=\"MobileNo\"\r\n          name=\"mobileNo\"\r\n          // value={user.mobileNo}\r\n          onChange={onchangeHandler}\r\n          type=\"text\"\r\n          color=\"secondary\"\r\n          required\r\n          sx={{ marginBottom: '10px' }}\r\n          fullWidth\r\n          variant=\"outlined\"\r\n        />\r\n        <label htmlFor=\"\">Email</label>\r\n        <TextField\r\n          id=\"outlined-fullname\"\r\n          label=\"Email\"\r\n          name=\"email\"\r\n          //  value={user.email}\r\n          onChange={onchangeHandler}\r\n          type=\"text\"\r\n          color=\"secondary\"\r\n          required\r\n          sx={{ marginBottom: '10px' }}\r\n          fullWidth\r\n          variant=\"outlined\"\r\n        />\r\n        <label>Address</label>\r\n        <TextField\r\n          id=\"outlined-fullname\"\r\n          label=\"Address\"\r\n          name=\"address\"\r\n          // value={user.address}\r\n          onChange={onchangeHandler}\r\n          type=\"text\"\r\n          color=\"secondary\"\r\n          required\r\n          sx={{ marginBottom: '10px' }}\r\n          fullWidth\r\n          variant=\"outlined\"\r\n        />\r\n        <label>Profile Image</label>\r\n        <div>\r\n          <input type=\"file\" name=\"uploadfile\" />\r\n        </div>\r\n\r\n        <Button\r\n          size=\"large\"\r\n          sx={{ marginTop: '20px' }}\r\n          className={styles.updateBtn}\r\n          variant=\"contained\"\r\n        >\r\n          Update Profile\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n\r\n/*\r\n\r\n    const profileimageHandler=(e)=>{\r\n       console.log(e.target.files[0])\r\n         setUser({...user,uploadedfile:e.target.files[0]})\r\n    }\r\n\r\n  // console.log(user.phoneNo)\r\n  //const email= JSON.parse(localStorage.getItem(\"userInfo\"))\r\n  // useEffect(()=>{\r\n  //     const fetchdata=async()=>{\r\n  //         await axios.get(`http://localhost:4000/updateprofile/${email}`)\r\n  //         .then((res)=>{\r\n  //             console.log(res.data)\r\n\r\n  //             setUser({fullname:res.data.fullname,\r\n  //                 email:res.data.email,\r\n  //                 address:res.data.address,\r\n  //                 mobileNo:res.data.mobileNo,\r\n  //                 phoneNo:res.data.phoneNo})\r\n  //         }).catch((err)=>{\r\n  //             console.log(err)\r\n  //         })\r\n  //     }\r\n  //     fetchdata();\r\n  // },[email])\r\n\r\n  //     const updateHandler=()=>{\r\n  //         if(user){\r\n  //             console.log(\"...user\",user)\r\n  //         //     var formData= new FormData();\r\n  //         //     // console.log(\"....\",user.uploadedfile,\"-------\",user.uploadedfile.name)\r\n  //         //     //formData.append('uploadfile',user.uploadedfile,user.uploadedfile.name)\r\n  //         //     formData.append(\"fullname\",\"abc\")\r\n  //         //     formData.append(\"email\",user.email)\r\n  //         //     formData.append(\"mobileNo\",user.mobileNo)\r\n  //         //     formData.append(\"phoneNo\",user.phoneNo)\r\n  //         //     formData.append(\"address\",user.address)\r\n  //         //    // var options = { content: formData };\r\n\r\n  //              axios.post(`http://localhost:4000/updateprofile/${email}`,user)\r\n  //             .then((res)=>{\r\n  //              localStorage.setItem('userInfo', JSON.stringify(res.data))\r\n  //                console.log(res.data)\r\n  //                  navigate(\"/user\")\r\n  //              }).catch((err)=>{\r\n  //                  setError(\"User not found\")\r\n  //                  console.log(\"error msg\",err)\r\n  //              })\r\n  //         }\r\n\r\n  //  }\r\n\r\n*/\r\n","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\hooks\\useFetchInventory.js",["79"],"import { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useFetchInventory = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [getproduct, setGetproduct] = useState(false);\r\n\r\n  const token = localStorage.getItem('token');\r\n\r\n  //getting the stock information\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    try {\r\n      console.log(token);\r\n      const fetchData = async () => {\r\n        const res = await axios.get('http://localhost:5000/stockinfo', {\r\n          headers: { authorization: `${token}` },\r\n        });\r\n        console.log(res);\r\n        if (res.status === 201) {\r\n          setData(res.data);\r\n          console.log(data, '......');\r\n          setLoading(false);\r\n        }\r\n      };\r\n      fetchData();\r\n    } catch (error) {\r\n      console.error('Error: ', error.message);\r\n      setError(error.message);\r\n      setLoading(false);\r\n    }\r\n  }, [getproduct]);\r\n\r\n  //adding the inventory\r\n\r\n  const addProduct = (product) => {\r\n    console.log(product);\r\n    //   setLoading(true)\r\n    try {\r\n      const fetchData = async () => {\r\n        const res = await axios.post(\r\n          'http://localhost:5000/addstock',\r\n          product,\r\n          {\r\n            headers: { authorization: `${token}` },\r\n          }\r\n        );\r\n        console.log(res);\r\n        //   if(res.success){\r\n        console.log(res.status);\r\n        // const newData = [...data];\r\n        if (res.status === 201) {\r\n          setGetproduct((prev) => !prev);\r\n        }\r\n        // newData.push(product);\r\n        // setData(newData);\r\n        //   }\r\n        //   setLoading(false)\r\n      };\r\n      fetchData();\r\n    } catch (error) {\r\n      console.error('Error: ', error.message);\r\n      setError(error.message);\r\n      // setLoading(false)\r\n    }\r\n  };\r\n\r\n  //Delete the inventory\r\n  const deleteProduct = (index) => {\r\n    try {\r\n      const fetchData = async (e) => {\r\n        const id = data[index]._id;\r\n        const res = await axios.delete(\r\n          `http://localhost:5000/deletestock/${id}`,\r\n          {\r\n            headers: { authorization: `${token}` },\r\n          }\r\n        );\r\n        if (res.status === 201) {\r\n          const filter = [...data];\r\n          filter.splice(index, 1);\r\n          setData(filter);\r\n        }\r\n      };\r\n      fetchData();\r\n    } catch (error) {\r\n      console.error('Error: ', error.message);\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  return { loading, data, error, addProduct, deleteProduct };\r\n};\r\n\r\nexport default useFetchInventory;\r\n","D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\hooks\\useOrder.js",[],"D:\\DIGIKULL\\Projects\\Inventory-Management-System\\login-and-register-frontend\\src\\components\\pages\\dashboard\\barchart.jsx",["80"],"import React, { useState, useEffect } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport useOrder from \"../../../hooks/useOrder\";\r\n\r\nconst Barchart = () => {\r\n  const [productName, setproductName] = useState([]);\r\n  const [quantity, setQuantity] = useState([]);\r\n  {\r\n  }\r\n  const { customerDetails } = useOrder();\r\n  useEffect(() => {\r\n    const productname = [];\r\n    const productquantity = [];\r\n\r\n    const getOrderDetails = async () => {\r\n      for (let i = 0; i < customerDetails.length; i++) {\r\n        productname.push(customerDetails[i].productName);\r\n        productquantity.push(parseInt(customerDetails[i].quantity));\r\n      }\r\n      setproductName(productname);\r\n      setQuantity(productquantity);\r\n    };\r\n    getOrderDetails();\r\n  }, [customerDetails]);\r\n\r\n  return (\r\n    <div>\r\n      <Chart\r\n        type=\"bar\"\r\n        width={600}\r\n        height={300}\r\n        series={[\r\n          {\r\n            name: \"Customer Order \",\r\n            data: quantity,\r\n          },\r\n        ]}\r\n        options={{\r\n          title: {\r\n            text: \"BarChart\",\r\n            style: { fontSize: 20 },\r\n          },\r\n\r\n          subtitle: {\r\n            text: \"This is BarChart Graph\",\r\n            style: { fontSize: 18 },\r\n          },\r\n\r\n          colors: [\"#f90000\"],\r\n          theme: { mode: \"light\" },\r\n\r\n          xaxis: {\r\n            //  tickPlacement: \"on\",\r\n            categories: productName,\r\n            title: {\r\n              text: \"Product Name\",\r\n              style: { color: \"#f90000\", fontSize: 20 },\r\n            },\r\n          },\r\n\r\n          yaxis: {\r\n            // labels: {\r\n            //   formatter: (val) => {\r\n            //     return `${val}`;\r\n            //   },\r\n            //   style: { fontSize: \"15\", colors: [\"#f90000\"] },\r\n            // },\r\n            title: {\r\n              text: \"Order Quantity\",\r\n              style: { color: \"#f90000\", fontSize: 15 },\r\n            },\r\n          },\r\n\r\n          legend: {\r\n            show: true,\r\n            position: \"right\",\r\n          },\r\n\r\n          dataLabels: {\r\n            formatter: (val) => {\r\n              return `${val}`;\r\n            },\r\n            style: {\r\n              colors: [\"#f4f4f4\"],\r\n              fontSize: 15,\r\n            },\r\n          },\r\n        }}\r\n      ></Chart>\r\n    </div>\r\n  );\r\n};\r\nexport default Barchart;\r\n",{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":54,"column":18,"nodeType":"87","messageId":"88","endLine":54,"endColumn":24},{"ruleId":"89","severity":1,"message":"90","line":59,"column":21,"nodeType":"91","messageId":"92","endLine":59,"endColumn":23},{"ruleId":"93","severity":1,"message":"94","line":60,"column":7,"nodeType":"95","messageId":"96","endLine":71,"endColumn":8},{"ruleId":"85","severity":1,"message":"97","line":43,"column":11,"nodeType":"87","messageId":"88","endLine":43,"endColumn":18},{"ruleId":"85","severity":1,"message":"98","line":8,"column":17,"nodeType":"87","messageId":"88","endLine":8,"endColumn":25},{"ruleId":"99","severity":1,"message":"100","line":29,"column":11,"nodeType":"101","endLine":29,"endColumn":23},{"ruleId":"102","severity":1,"message":"103","line":34,"column":6,"nodeType":"104","endLine":34,"endColumn":18,"suggestions":"105"},{"ruleId":"93","severity":1,"message":"94","line":8,"column":3,"nodeType":"95","messageId":"96","endLine":9,"endColumn":4},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'status' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'loading' is assigned a value but never used.","'setError' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'data' and 'token'. Either include them or remove the dependency array.","ArrayExpression",["108"],"no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},"Update the dependencies array to be: [data, getproduct, token]",{"range":"111","text":"112"},[993,1005],"[data, getproduct, token]"]